(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{388:function(t,_,a){"use strict";a.r(_);var e=a(42),s=Object(e.a)({},(function(){var t=this,_=t.$createElement,a=t._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"第1节-基于语法树和概率的ai模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第1节-基于语法树和概率的ai模型"}},[t._v("#")]),t._v(" 第1节 基于语法树和概率的AI模型")]),t._v(" "),a("p",[t._v("这一节主要学习了：")]),t._v(" "),a("h3",{attrs:{id:"_1-基于语法树规则的短句生成器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基于语法树规则的短句生成器"}},[t._v("#")]),t._v(" 1. 基于语法树规则的短句生成器")]),t._v(" "),a("blockquote",[a("p",[t._v("基于语法树的短句生成器基本思路是通过预先构建的语法树，以及词库，对一个固定语法不断递归查找最终生成一句符合该语法的短句")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1571823712&di=a36fecb9108f453546fb3aca53cd450c&imgtype=jpg&er=1&src=http%3A%2F%2Fimg3.coin163.com%2F50%2F84%2FJfInei.gif",alt:"语法树例子"}})]),t._v(" "),a("p",[a("em",[t._v("基于语法树的句子生成器，"),a("strong",[t._v("优点")]),t._v("在于速度快，需要数据量少，开发快，可以迅速开发出适用于某个领域的生成器，而"),a("strong",[t._v("缺点")]),t._v("在于依赖预先制定的规则所以通用性差，可扩展性也较差。")])]),t._v(" "),a("h3",{attrs:{id:"_2-基于概率（语言）模型的句子判断器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-基于概率（语言）模型的句子判断器"}},[t._v("#")]),t._v(" 2. 基于概率（语言）模型的句子判断器")]),t._v(" "),a("blockquote",[a("p",[t._v("基于语言模型的句子判断器可以运用概率模型计算一句短句在某个语料库的基础下产生的可能性，其中包括1-gram，2-gram，n-gram模型")])]),t._v(" "),a("h4",{attrs:{id:"_2-1-1-gram模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-gram模型"}},[t._v("#")]),t._v(" 2.1 1-gram模型")]),t._v(" "),a("p",[t._v("1-gram模型假设一句句子的每个词的出现都是独立的，因此一句话产生的概率即为所有词在语料库中出现概率之积：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://latex.codecogs.com/gif.latex?P(sentence)=P(w_1%5Ccdot%7Bw_2%7D%5Ccdots%7Bw_n%7D)=%5Cprod_%7Bi=1%7D%5E%7Bn%7D%5Cfrac%7Bcount(w_i)%7D%7B%5Csum_%7B%5Cforall%7Bk%7D%7Dcount(w_k)%7D",alt:""}})]),t._v(" "),a("p",[t._v("其中k为语料库中的Token数目")]),t._v(" "),a("h4",{attrs:{id:"_2-2-2-gram模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-gram模型"}},[t._v("#")]),t._v(" 2.2 2-gram模型")]),t._v(" "),a("p",[t._v("2-gram模型假设一句句子中的每一个词的出现依赖且仅依赖于上一个词，因此有：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://latex.codecogs.com/gif.latex?P(sentence)%5Cnewline=P(w_1%5Ccdot%7Bw_2%7D%5Ccdots%7Bw_n%7D)%5Cnewline=P(w_n%7Cw_1%5Ccdots%7Bw_%7Bn-1%7D%7D)%5Ccdot%7BP(w_1%5Ccdots%7Bw_%7Bn-1%7D%7D)%7D%5Cnewline=P(w_n%7Cw_1%5Ccdots%7Bw_%7Bn-1%7D%7D)%5Ccdot%7BP(w_%7Bn-1%7D%7Cw_1%5Ccdots%7Bw_%7Bn-2%7D%7D)%7D%5Ccdot%7BP(w_1%5Ccdots%7Bw_%7Bn-2%7D%7D)%7D%5Cnewline=P(w_%7Bn%7D%7Cw_1%5Ccdots%7Bw_%7Bn-1%7D%7D)%5Ccdot%7BP(w_%7Bn-1%7D%7Cw_%7B1%7D%5Ccdots%7Bw_%7Bn-2%7D%7D)%7D%5Ccdot%7BP(w_%7Bn-2%7D%7Cw_1%5Ccdots%7Bw_%7Bn-1%7D%7D)%7D%5Ccdots%7BP(w_2%7Cw_1)%5Ccdot%7BP(w_1)%7D%7D%5Cnewline=P(w_1)%5Ccdot%7BP(w_2%7Cw_1)%7D%5Ccdot%7BP(w_3%7Cw_2)%7D%5Ccdot%7BP(w_4%7Cw_3)%7D%5Ccdots%7BP(w_%7Bn-1%7D%7Cw_%7Bn%7D)%7D",alt:""}})]),t._v(" "),a("p",[t._v("又根据贝叶斯公式：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://latex.codecogs.com/gif.latex?P(w_%7Bi+1%7D%7Cw_%7Bi%7D)=%5Cfrac%7BP(w_%7Bi+1%7D%5Ccdot%7Bw_%7Bi%7D%7D)%7D%7BP(w_%7Bi%7D)%7D",alt:""}})]),t._v(" "),a("p",[t._v("所以上式可以简化为：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://latex.codecogs.com/gif.latex?P(sentence)=P(w_1%5Ccdot%7Bw_2%7D%5Ccdots%7Bw_n%7D)=%5Cprod_%7Bi=1%7D%5E%7Bn-1%7D%5Cfrac%7Bcount(w_i,w_%7Bi+1%7D)%7D%7Bcount(w_i)%7D%5Ctimes%7BP(w_1)%7D",alt:""}})]),t._v(" "),a("p",[t._v("其中，"),a("img",{attrs:{src:"http://latex.codecogs.com/gif.latex?count(w_i,w_%7Bi+1%7D)",alt:""}}),t._v(" 即为前后两个词同时出现的次数，对应的token就是将语料库中所有1-gram token前后两两结合，比如[“我”，“喜欢”，“游泳”]就变成了[“我喜欢”，“喜欢游泳”]。")]),t._v(" "),a("p",[t._v("具体实现方式为：")]),t._v(" "),a("ol",[a("li",[t._v("将语料库进行数据清洗并分词/split")]),t._v(" "),a("li",[t._v("调用collections.Counter直接对分词完的1-gram数组计数，产生words_count_1_gram")]),t._v(" "),a("li",[t._v("对分词完的数组进行前后两两相加，产生新的2-gram数组，并调用Counter产生words_count_2_gram")]),t._v(" "),a("li",[t._v("给定一句话，套用公式计算句子生成概率")])]),t._v(" "),a("p",[a("em",[t._v("基于语言模型的句子判断器，优点在于模型简单开发速度快，缺点在于对于长句有先天性劣势（长句因为概率相乘，几乎总是比短句的概率要低）")])]),t._v(" "),a("h3",{attrs:{id:"_3-附加题：基于模式匹配的对话机器人"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-附加题：基于模式匹配的对话机器人"}},[t._v("#")]),t._v(" 3. 附加题：基于模式匹配的对话机器人")]),t._v(" "),a("p",[t._v("主要思路为模式匹配：")]),t._v(" "),a("ol",[a("li",[t._v("根据字典里的模式（pattern）对saying进行匹配，看是否有匹配的pattern")]),t._v(" "),a("li",[t._v("找到匹配的问句，提取匹配的字符")]),t._v(" "),a("li",[t._v("从待选的回答里面随机选取一个，用匹配字符替换")]),t._v(" "),a("li",[t._v("join成回答输出")])]),t._v(" "),a("p",[t._v("匹配规则的样例：")]),t._v(" "),a("blockquote",[a("p",[t._v('rules = {\n"?*X hello ?*Y": ["Hi, how do you do?"],\n"I was ?*X": ["Were you really ?X ?", "I already knew you were ?X ."]\n}')])]),t._v(" "),a("p",[t._v("根据这样的样例，?X, ?Y, ?*X处可以匹配任意词语或短句实体，并且将匹配的实体替换到任一回答中，然后输出。")]),t._v(" "),a("p",[t._v("其中的一些关键函数有：")]),t._v(" "),a("p",[t._v("① 判断一个token是否是匹配符")]),t._v(" "),a("p",[t._v("② pat_match函数，输入一个pattern和一个saying，返回其中的(匹配符+匹配词)组合")]),t._v(" "),a("p",[t._v("③ pat_match_with_seg函数，使pat_match函数可以匹配(多变量匹配符+多个匹配词)")]),t._v(" "),a("p",[t._v("④ substitute函数，根据匹配组合，将response中的匹配符替换掉，变成回答")]),t._v(" "),a("p",[t._v("⑤ get_response函数，根据rules list和saying，返回response的最终函数")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/SimZhou/NLP_Assignments",target:"_blank",rel:"noopener noreferrer"}},[t._v("返回目录"),a("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=s.exports}}]);